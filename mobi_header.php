<?php
/**
 * mobi_header.php
 * 
 * (c)2013 mrdragonraaar.com
 */
include_once('base_header.php');

/**
 * MOBI Header.
 */
class mobi_header extends base_header
{
	const HEADER_TYPE_MOBI = "MOBI";	/* Header Type: MOBI */
	const MOBI_HEADER_LEN = 232;		/* Initial header length */

	const MOBI_VERSION = 6;			/* MobiPocket version */

	/* MOBIPocket File Type */
	const MOBI_TYPE_MOBIPOCKET = 2;	/* MOBIPocket */
	const MOBI_TYPE_PALMDOC = 3;	/* PalmDOC */
	const MOBI_TYPE_AUDIO = 4;	/* Audio */
	const MOBI_TYPE_KINDLEGEN =232;	/* MOBIPocket generated by KindleGen */
	const MOBI_TYPE_KF8 = 248;	/* KF8 generated by KindleGen */
	const MOBI_TYPE_NEWS = 257;	/* News */
	const MOBI_TYPE_NEWSFEED = 258;	/* News Feed */
	const MOBI_TYPE_MAGAZINE = 259;	/* News Magazine */
	const MOBI_TYPE_PICS = 513;	/* PICS */
	const MOBI_TYPE_WORD = 514;	/* WORD */
	const MOBI_TYPE_XLS = 515;	/* XLS */
	const MOBI_TYPE_PPT = 516;	/* PPT */
	const MOBI_TYPE_TEXT = 517;	/* TEXT */
	const MOBI_TYPE_HTML = 518;	/* HTML */
	const MOBI_TYPE_MOBIPOCKET_STR = "MOBIPocket";
	const MOBI_TYPE_PALMDOC_STR = "PalmDOC";
	const MOBI_TYPE_AUDIO_STR = "Audio";
	const MOBI_TYPE_KINDLEGEN_STR = "MOBIPocket generated by KindleGen";
	const MOBI_TYPE_KF8_STR = "KF8 generated by KindleGen";
	const MOBI_TYPE_NEWS_STR = "News";
	const MOBI_TYPE_NEWSFEED_STR = "News Feed";
	const MOBI_TYPE_MAGAZINE_STR = "News Magazine";
	const MOBI_TYPE_PICS_STR = "PICS";
	const MOBI_TYPE_WORD_STR = "WORD";
	const MOBI_TYPE_XLS_STR = "XLS";
	const MOBI_TYPE_PPT_STR = "PPT";
	const MOBI_TYPE_TEXT_STR = "TEXT";
	const MOBI_TYPE_HTML_STR = "HTML";

	/* Text Encoding */
	const MOBI_ENCODING_WINLATIN1 = 1252;	/* WinLatin1 */
	const MOBI_ENCODING_UTF8 = 65001;	/* UTF-8 */
	const MOBI_ENCODING_WINLATIN1_STR = "iso-8859-1";
	const MOBI_ENCODING_UTF8_STR = "UTF-8";

	/* Locales */
	const LOCALE_ENGLISH = 0x09;		/* English */
	const LOCALE_ENGLISH_UK = 0x809;	/* English (UK) */
	const LOCALE_ENGLISH_US = 0x409;	/* English (US) */

	/* EXTH Flags */
	const EXTH_FLAG_NONE = 0x00;		/* No flags */
	const EXTH_FLAG_HEADER = 0x40;		/* EXTH header is present */
	const EXTH_FLAG_FONTS = 0x1000;		/* Embedded fonts are present */

	public $mobi_type;
	public $text_encoding;
	public $unique_id;
	public $file_version;
	public $ortographic_index;
	public $inflection_index;
	public $index_names;
	public $index_keys;
	public $extra_index_0;
	public $extra_index_1;
	public $extra_index_2;
	public $extra_index_3;
	public $extra_index_4;
	public $extra_index_5;
	public $first_non_book_index;
	public $full_name_offset;
	public $full_name_length;
	public $locale;
	public $input_language;
	public $output_language;
	public $min_version;
	public $first_image_index;
	public $huffman_record_offset;
	public $huffman_record_count;
	public $huffman_table_offset;
	public $huffman_table_length;
	public $exth_flags;
	public $drm_offset;
	public $drm_count;
	public $drm_size;
	public $drm_flags;
	public $first_content_index;
	public $last_content_index;
	public $fcis_index;
	public $flis_index;
	public $first_compilation_data_section_count;
	public $number_of_compilation_data_sections;
	public $extra_record_data_flags;
	public $indx_offset;

	/**
         * Create new MOBI header instance.
         */
	function __construct()
	{
		$this->_init();
	}

	/**
         * Initialise MOBI header.
         */
	protected function _init()
	{
		parent::_init();
		$this->identifier = self::HEADER_TYPE_MOBI;
		$this->header_length = self::MOBI_HEADER_LEN;
		$this->mobi_type = self::MOBI_TYPE_MOBIPOCKET;
		$this->text_encoding = self::MOBI_ENCODING_UTF8;
		$this->unique_id = rand();
		$this->file_version = self::MOBI_VERSION;
		$this->ortographic_index = -1;
		$this->inflection_index = -1;
		$this->index_names = -1;
		$this->index_keys = -1;
		$this->extra_index_0 = -1;
		$this->extra_index_1 = -1;
		$this->extra_index_2 = -1;
		$this->extra_index_3 = -1;
		$this->extra_index_4 = -1;
		$this->extra_index_5 = -1;
		$this->first_non_book_index = -1;
		$this->full_name_offset = 0;
		$this->full_name_length = 0;
		$this->locale = self::LOCALE_ENGLISH;
		$this->input_language = 0;
		$this->output_language = 0;
		$this->min_version = self::MOBI_VERSION;
		$this->first_image_index = -1;
		$this->huffman_record_offset = 0;
		$this->huffman_record_count = 0;
		$this->huffman_table_offset = 0;
		$this->huffman_table_length = 0;
		$this->exth_flags = self::EXTH_FLAG_HEADER;
		$this->drm_offset = -1;
		$this->drm_count = -1;
		$this->drm_size = 0;
		$this->drm_flags = 0;
		$this->first_content_index = 0;
		$this->last_content_index = 0;
		$this->fcis_index = -1;
		$this->flis_index = -1;
		$this->first_compilation_data_section_count = 0;
		$this->number_of_compilation_data_sections = -1;
		$this->extra_record_data_flags = 1;
		$this->indx_offset = -1;
	}

	/**
	 * Get MOBI header from PDB record 0.
	 * @param $pdb_record_0 PDB record 0.
	 * @param $offset offset in PDB record 0.
	 * @return offset in PDB record 0.
	 */
	public function read($pdb_record_0, $offset)
	{
		$offset = parent::read($pdb_record_0, $offset);
		if ($offset > -1)
		{
			if ($this->is_header_type_mobi())
			{
				$mobi_header = unpack("Nmobi_type/Ntext_encoding/Nunique_id/Nfile_version/Nortographic_index/Ninflection_index/Nindex_names/Nindex_keys/Nextra_index_0/Nextra_index_1/Nextra_index_2/Nextra_index_3/Nextra_index_4/Nextra_index_5/Nfirst_non_book_index/Nfull_name_offset/Nfull_name_length/Nlocale/Ninput_language/Noutput_language/Nmin_version/Nfirst_image_index/Nhuffman_record_offset/Nhuffman_record_count/Nhuffman_table_offset/Nhuffman_table_length/Nexth_flags/x32/Ndrm_offset/Ndrm_count/Ndrm_size/Ndrm_flags/x12/nfirst_content_index/nlast_content_index/x4/Nfcis_index/x4/Nflis_index/x4/x8/x4/Nfirst_compilation_data_section_count/Nnumber_of_compilation_data_sections/x4/Nextra_record_data_flags/Nindx_offset", $this->data);

				/* MOBI Type */
				if (isset($mobi_header['mobi_type']))
					$this->mobi_type = 
					   $mobi_header['mobi_type'];
				/* Text Encoding */
				if (isset($mobi_header['text_encoding']))
					$this->text_encoding = 
					   $mobi_header['text_encoding'];
				/* Unique ID */
				if (isset($mobi_header['unique_id']))
					$this->unique_id = 
					   $mobi_header['unique_id'];
				/* File Version */
				if (isset($mobi_header['file_version']))
					$this->file_version = 
					   $mobi_header['file_version'];
				/* Ortographic Index */
				if (isset($mobi_header['ortographic_index']))
					$this->ortographic_index = 
					   $mobi_header['ortographic_index'];
				/* Inflection Index */
				if (isset($mobi_header['inflection_index']))
					$this->inflection_index = 
					   $mobi_header['inflection_index'];
				/* Index Names */
				if (isset($mobi_header['index_names']))
					$this->index_names = 
					   $mobi_header['index_names'];
				/* Index Keys */
				if (isset($mobi_header['index_keys']))
					$this->index_keys = 
					   $mobi_header['index_keys'];
				/* Extra Index 0 */
				if (isset($mobi_header['extra_index_0']))
					$this->extra_index_0 = 
					   $mobi_header['extra_index_0'];
				/* Extra Index 1 */
				if (isset($mobi_header['extra_index_1']))
					$this->extra_index_1 = 
					   $mobi_header['extra_index_1'];
				/* Extra Index 2 */
				if (isset($mobi_header['extra_index_2']))
					$this->extra_index_2 = 
					   $mobi_header['extra_index_2'];
				/* Extra Index 3 */
				if (isset($mobi_header['extra_index_3']))
					$this->extra_index_3 = 
					   $mobi_header['extra_index_3'];
				/* Extra Index 4 */
				if (isset($mobi_header['extra_index_4']))
					$this->extra_index_4 = 
					   $mobi_header['extra_index_4'];
				/* Extra Index 5 */
				if (isset($mobi_header['extra_index_5']))
					$this->extra_index_5 = 
					   $mobi_header['extra_index_5'];
				/* First Non-Book Index */
				if (isset($mobi_header['first_non_book_index']))
					$this->first_non_book_index = 
					   $mobi_header['first_non_book_index'];
				/* Full Name Offset */
				if (isset($mobi_header['full_name_offset']))
					$this->full_name_offset = 
					   $mobi_header['full_name_offset'];
				/* Full Name Length */
				if (isset($mobi_header['full_name_length']))
					$this->full_name_length = 
					   $mobi_header['full_name_length'];
				/* Locale */
				if (isset($mobi_header['locale']))
					$this->locale = 
					   $mobi_header['locale'];
				/* Input Language */
				if (isset($mobi_header['input_language']))
					$this->input_language = 
					   $mobi_header['input_language'];
				/* Output Language */
				if (isset($mobi_header['output_language']))
					$this->output_language = 
					   $mobi_header['output_language'];
				/* Min Version */
				if (isset($mobi_header['min_version']))
					$this->min_version = 
					   $mobi_header['min_version'];
				/* First Image Index */
				if (isset($mobi_header['first_image_index']))
					$this->first_image_index = 
					   $mobi_header['first_image_index'];
				/* Huffman Record Offset */
				if (isset($mobi_header['huffman_record_offset']))
					$this->huffman_record_offset = 
					   $mobi_header['huffman_record_offset'];
				/* Huffman Record Count */
				if (isset($mobi_header['huffman_record_count']))
					$this->huffman_record_count = 
					   $mobi_header['huffman_record_count'];
				/* Huffman Table Offset */
				if (isset($mobi_header['huffman_table_offset']))
					$this->huffman_table_offset = 
					   $mobi_header['huffman_table_offset'];
				/* Huffman Table Length */
				if (isset($mobi_header['huffman_table_length']))
					$this->huffman_table_length = 
					   $mobi_header['huffman_table_length'];
				/* EXTH Flags */
				if (isset($mobi_header['exth_flags']))
					$this->exth_flags = 
					   $mobi_header['exth_flags'];
				/* DRM Offset */
				if (isset($mobi_header['drm_offset']))
					$this->drm_offset = 
					   $mobi_header['drm_offset'];
				/* DRM Count */
				if (isset($mobi_header['drm_count']))
					$this->drm_count = 
					   $mobi_header['drm_count'];
				/* DRM Size */
				if (isset($mobi_header['drm_size']))
					$this->drm_size = 
					   $mobi_header['drm_size'];
				/* DRM Flags */
				if (isset($mobi_header['drm_flags']))
					$this->drm_flags = 
					   $mobi_header['drm_flags'];
				/* First Content Record Index */
				if (isset($mobi_header['first_content_index']))
					$this->first_content_index = 
					   $mobi_header['first_content_index'];
				/* Last Content Record Index */
				if (isset($mobi_header['last_content_index']))
					$this->last_content_index = 
					   $mobi_header['last_content_index'];
				/* FCIS Index */
				if (isset($mobi_header['fcis_index']))
					$this->fcis_index = 
					   $mobi_header['fcis_index'];
				/* FLIS Index */
				if (isset($mobi_header['flis_index']))
					$this->flis_index = 
					   $mobi_header['flis_index'];
				/* First Compilation Data Section Count */
				if (isset($mobi_header['first_compilation_data_section_count']))
					$this->first_compilation_data_section_count = 
					   $mobi_header['first_compilation_data_section_count'];
				/* Number of Compilation Data Sections */
				if (isset($mobi_header['number_of_compilation_data_sections']))
					$this->number_of_compilation_data_sections = 
					   $mobi_header['number_of_compilation_data_sections'];
				/* Extra Record Data Flags */
				if (isset($mobi_header['extra_record_data_flags']))
					$this->extra_record_data_flags = 
					   $mobi_header['extra_record_data_flags'];
				/* INDX Record Offset */
				if (isset($mobi_header['indx_offset']))
					$this->indx_offset = 
					   $mobi_header['indx_offset'];

				return $offset;
			}
		}

		return -1;
	}

	/**
	 * Get packed MOBI header.
	 * @return packed MOBI header.
	 */
	public function write()
	{
		$this->data = 
		   pack("NNNNNNNNNNNNNNNNNNNNNNNNNNNx32NNNNx12nnx4Nx4Nx4x8x4NNx4NN",
			$this->mobi_type,
			$this->text_encoding,
			$this->unique_id,
			$this->file_version,
			$this->ortographic_index,
			$this->inflection_index,
			$this->index_names,
			$this->index_keys,
			$this->extra_index_0,
			$this->extra_index_1,
			$this->extra_index_2,
			$this->extra_index_3,
			$this->extra_index_4,
			$this->extra_index_5,
			$this->first_non_book_index,
			$this->full_name_offset,
			$this->full_name_length,
			$this->locale,
			$this->input_language,
			$this->output_language,
			$this->min_version,
			$this->first_image_index,
			$this->huffman_record_offset,
			$this->huffman_record_count,
			$this->huffman_table_offset,
			$this->huffman_table_length,
			$this->exth_flags,
			$this->drm_offset,
			$this->drm_count,
			$this->drm_size,
			$this->drm_flags,
			$this->first_content_index,
			$this->last_content_index,
			$this->fcis_index,
			$this->flis_index,
			$this->first_compilation_data_section_count,
			$this->number_of_compilation_data_sections,
			$this->extra_record_data_flags,
			$this->indx_offset
		);

		return parent::write();
	}

	/**
	 * Check if header is MOBI header type.
	 * @return non-zero if header is MOBI header type.
	 */
	public function is_header_type_mobi()
	{
		return $this->is_header_type(self::HEADER_TYPE_MOBI);
	}

	/**
	 * Get MOBI type as string.
	 * @return MOBI type string.
	 */
	public function mobi_type_str()
	{
		switch ($this->mobi_type)
		{
			case self::MOBI_TYPE_MOBIPOCKET:
				return self::MOBI_TYPE_MOBIPOCKET_STR;
			case self::MOBI_TYPE_PALMDOC:
				return self::MOBI_TYPE_PALMDOC_STR;
			case self::MOBI_TYPE_AUDIO:
				return self::MOBI_TYPE_AUDIO_STR;
			case self::MOBI_TYPE_KINDLEGEN:
				return self::MOBI_TYPE_KINDLEGEN_STR;
			case self::MOBI_TYPE_KF8:
				return self::MOBI_TYPE_KF8_STR;
			case self::MOBI_TYPE_NEWS:
				return self::MOBI_TYPE_NEWS_STR;
			case self::MOBI_TYPE_NEWSFEED:
				return self::MOBI_TYPE_NEWSFEED_STR;
			case self::MOBI_TYPE_MAGAZINE:
				return self::MOBI_TYPE_MAGAZINE_STR;
			case self::MOBI_TYPE_PICS:
				return self::MOBI_TYPE_PICS_STR;
			case self::MOBI_TYPE_WORD:
				return self::MOBI_TYPE_WORD_STR;
			case self::MOBI_TYPE_XLS:
				return self::MOBI_TYPE_XLS_STR;
			case self::MOBI_TYPE_PPT:
				return self::MOBI_TYPE_PPT_STR;
			case self::MOBI_TYPE_TEXT:
				return self::MOBI_TYPE_TEXT_STR;
			case self::MOBI_TYPE_HTML:
				return self::MOBI_TYPE_HTML_STR;
			default:
				return "";
		}
	}

	/**
	 * Get MOBI text encoding as string.
	 * @return MOBI text encoding string.
	 */
	public function text_encoding_str()
	{
		switch ($this->text_encoding)
		{
			case self::MOBI_ENCODING_WINLATIN1:
				return self::MOBI_ENCODING_WINLATIN1_STR;
			case self::MOBI_ENCODING_UTF8:
				return self::MOBI_ENCODING_UTF8_STR;
			default:
				return "";
		}
	}

	/**
	 * Check if EXTH header should exist.
	 * @return non-zero if EXTH header should exist.
	 */
	public function has_exth_header()
	{
		return $this->exth_flags & self::EXTH_FLAG_HEADER;
	}

	/**
	 * Remove all EXTH flags.
	 * @return new EXTH flags value.
	 */
	public function set_exth_flag_none()
	{
		return $this->exth_flags = self::EXTH_FLAG_NONE;
	}

	/**
	 * Set EXTH header flag.
	 * @return new EXTH flags value.
	 */
	public function set_exth_flag_header()
	{
		return $this->exth_flags |= self::EXTH_FLAG_HEADER;
	}

	/**
	 * Remove EXTH header flag.
	 * @return new EXTH flags value.
	 */
	public function remove_exth_flag_header()
	{
		return $this->exth_flags &= ~self::EXTH_FLAG_HEADER;
	}

	/**
	 * Set EXTH fonts flag.
	 * @return new EXTH flags value.
	 */
	public function set_exth_flag_fonts()
	{
		return $this->exth_flags |= self::EXTH_FLAG_FONTS;
	}

	/**
	 * Remove EXTH fonts flag.
	 * @return new EXTH flags value.
	 */
	public function remove_exth_flag_fonts()
	{
		return $this->exth_flags &= ~self::EXTH_FLAG_FONTS;
	}

	/**
	 * Print MOBI header.
	 */
	public function display()
	{
		parent::display();
		echo "MOBI Type: $this->mobi_type\n";
		echo "Text Encoding: $this->text_encoding\n";
		echo "Unique ID: $this->unique_id\n";
		echo "File Version: $this->file_version\n";
		echo "Ortographic Index: $this->ortographic_index\n";
		echo "Inflection Index: $this->inflection_index\n";
		echo "Index Names: $this->index_names\n";
		echo "Index Keys: $this->index_keys\n";
		echo "Extra Index 0: $this->extra_index_0\n";
		echo "Extra Index 1: $this->extra_index_1\n";
		echo "Extra Index 2: $this->extra_index_2\n";
		echo "Extra Index 3: $this->extra_index_3\n";
		echo "Extra Index 4: $this->extra_index_4\n";
		echo "Extra Index 5: $this->extra_index_5\n";
		echo "First Non-Book Index: $this->first_non_book_index\n";
		echo "Full Name Offset: $this->full_name_offset\n";
		echo "Full Name Length: $this->full_name_length\n";
		echo "Locale: $this->locale\n";
		echo "Input Language: $this->input_language\n";
		echo "Output Language: $this->output_language\n";
		echo "Min Version: $this->min_version\n";
		echo "First Image Index: $this->first_image_index\n";
		echo "Huffman Record Offset: $this->huffman_record_offset\n";
		echo "Huffman Record Count: $this->huffman_record_count\n";
		echo "Huffman Table Offset: $this->huffman_table_offset\n";
		echo "Huffman Table Length: $this->huffman_table_length\n";
		echo "EXTH Flags: $this->exth_flags\n";
		echo "DRM Offset: $this->drm_offset\n";
		echo "DRM Count: $this->drm_count\n";
		echo "DRM Size: $this->drm_size\n";
		echo "DRM Flags: $this->drm_flags\n";
		echo "First Content Record Index: $this->first_content_index\n";
		echo "Last Content Record Index: $this->last_content_index\n";
		echo "FCIS Index: $this->fcis_index\n";
		echo "FLIS Index: $this->flis_index\n";
		echo "First Compilation Data Section Count: $this->first_compilation_data_section_count\n";
		echo "Number of Compilation Data Sections: $this->number_of_compilation_data_sections\n";
		echo "Extra Record Data Flags: $this->extra_record_data_flags\n";
		echo "INDX Offset: $this->indx_offset\n";
	}
}

?>
